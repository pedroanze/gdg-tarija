---
import { Image } from "astro:assets";
import GoogleExtBanner from "../../assets/svg/hero.svg";
import LogoDer from "../../assets/svg/Modal_Logo_Der.svg";

interface DiaryDetailProps {
  id: string;
  titulo: string;
  nombre: string;
  foto: string;
  descripcion: string;
  bio_speaker?: string;
  hora: string;
  tema: string;
  nivel:string;
}

const { id, titulo, nombre, foto, descripcion, hora, tema, nivel } = Astro.props as DiaryDetailProps;
---

<div id={id} class="modal fixed inset-0 bg-gray-900 bg-opacity-50 hidden grid place-items-center z-10">
  <div class="modal-content bg-white rounded-lg overflow-hidden relative w-full md:w-1/2 h-auto py-6 px-8">
    <button class="absolute top-4 right-4 text-gray-700 hover:text-gray-900" onclick={`closeModal('${id}')`}>
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
    <div class="text-center">
      <img class="rounded-full w-32 h-32 object-cover mx-auto mb-4 relative z-10" src={foto} alt={nombre} />
      <h2 class="font-semibold text-blue-500 text-lg">{nombre}</h2>
      <p class="mb-3">Speaker</p>
      <h3 class="font-semibold text-xl text-gray-900">{titulo}</h3>
      <p class="text-sm text-gray-700 text-justify pt-2" id={`desc-${id}`} data-descripcion={descripcion} data-expanded="false">
        {descripcion.length > 100 ? `${descripcion.substring(0, 100)}...` : descripcion}
        {descripcion.length > 100 ? (
          <span class="text-blue-500 cursor-pointer underline ml-1" onclick={`toggleDescription('${id}')`}>
            Mostrar más
          </span>
        ) : null}
      </p>
      <div class="text-left mt-2 mb-6">
        <div class="flex items-center">
          <span class="material-symbols-outlined md:text-xl text-lg lg:text-2xl">
            schedule
          </span>
          <h1 class="text-2xl md:text-3xl font-bold text-gray-900 ml-2">{hora}</h1>
        </div>
        <div class="">
          <span class="rounded-full px-3 py-1 text-sm inline-block" style="background: linear-gradient(to right, #9b5de5, #4361ee); color: white;">{tema}</span>
          <span class="rounded-full px-3 py-1 text-sm inline-block mt-2" style="background: linear-gradient(to right, #E5C34B, #36AC51); color: white;">{nivel}</span>
        </div>
      </div>
      
    </div>
    <div class="absolute bottom-0 right-0">
      <Image class="w-24 h-auto mx-auto" src={LogoDer} alt="Logo" />
    </div>
    <div class="absolute bottom-0 left-0 right-0 flex justify-center">
      <Image class="w-32 md:w-64 h-auto mx-auto" src={GoogleExtBanner} alt="Logo" />
    </div>
  </div>
</div>

<script is:inline>
  function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    modal.classList.add("hidden");
    document.body.style.overflow = "";
  }

  function toggleDescription(id) {
    const descElement = document.getElementById(`desc-${id}`);
    const descripcionCompleta = descElement.getAttribute('data-descripcion');
    const isExpanded = descElement.getAttribute('data-expanded') === 'true';

    if (isExpanded) {
      descElement.innerHTML = `${descripcionCompleta.substring(0, 100)}... <span class="text-blue-500 cursor-pointer underline ml-1" onclick="toggleDescription('${id}')">Mostrar más</span>`;
      descElement.setAttribute('data-expanded', 'false');
    } else {
      descElement.innerHTML = `${descripcionCompleta} <span class="text-blue-500 cursor-pointer underline ml-1" onclick="toggleDescription('${id}')">Mostrar menos</span>`;
      descElement.setAttribute('data-expanded', 'true');
    }
  }

</script>
